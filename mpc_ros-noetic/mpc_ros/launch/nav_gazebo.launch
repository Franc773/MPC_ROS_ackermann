<launch>

    <!--  ************** Global Parameters ***************  -->
    <param name="use_sim_time" value="true"/>
    <arg name="controller"  default="mpc" doc="opt: dwa, mpc, pure_pursuit"/> 
    <arg name="model"  default="ackermann" doc="opt: serving_bot,ackermann,diff, bike"/> 
    <arg name="tf_prefix"  default=""/> 

    <!--  ************** GAZEBO Simulator ***************  -->
    <arg name="x_pos" default="0.0"/>
    <arg name="y_pos" default="0.0"/>
    <arg name="z_pos" default="0.0"/>
    <arg name="roll" default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="yaw" default="-1.507"/>
    <arg name="gui" default="true"/>

    <!--  ************** Robot models ***************  -->
    
   	 <!--  ******** SEVING_BOT MODEL *********  FUNZIONA *******-->
    <param name="robot_description" command="$(find xacro)/xacro $(find servingbot_description)/urdf/servingbot.urdf.xacro" if="$(eval model == 'serving_bot')"/> 
    
        <!--  ******** Ackermann model ********* NON SI MUOVE ******* -->
    <param name="robot_description" command="$(find xacro)/xacro $(find mpc_ros_description)/urdf/ackermann/ackermann.urdf.xacro" if="$(eval model == 'ackermann')"/>

        <!--  ******** Bicycle model ********* NON ANCORA TESTATO ****** -->
    <param name="robot_description" command="$(find xacro)/xacro $(find mpc_ros_description)/urdf/bicycle/bicycle_bot.urdf.xacro" if="$(eval model == 'bike')"/>
       
        <!--  ******** Differential model ********* NON ANCORA TESTATO ****** -->
    <param name="robot_description" command="$(find xacro)/xacro $(find mpc_ros_description)/urdf/diff/differential_bot.gazebo.xacro" if="$(eval model == 'diff')"/>
    
    
    <!-- CARICA IL "MONDO" SU GAZEBO-->
    
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find mpc_ros)/worlds/sq_world.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
        </include>

        
  	<!--  *Seving_bot model*  -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model servingbot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'serving_bot')" />
    
    


    <!--  *ackermann model*  -->
          <!-- ackerman model funziona aggiungendo queste righe di codice e utilizzando la GUI che pubblica sul topic ackerman/cmd_vel -->
          
  <!-- Load ros_control controller configuration parameters -->
    <rosparam file="$(find mpc_ros_description)/config/ctrl_ackermann_steering_controller.yaml" command="load" if="$(eval model == 'ackermann')" />
    <rosparam file="$(find mpc_ros_description)/config/ctrl_gains.yaml" command="load" if="$(eval model == 'ackermann')" />
    <rosparam file="$(find mpc_ros_description)/config/ctrl_joint_state_publisher.yaml" command="load" if="$(eval model == 'ackermann')" />
    <rosparam file="$(find mpc_ros_description)/config/ctrl_steer_bot_hardware_gazebo.yaml" command="load" if="$(eval model == 'ackermann')"/>
      
              <!-- Spawn the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" 
        args="joint_state_publisher ackermann_steering_controller"
        output="screen" respawn="false" />
           
              <!-- Launch a rqt steering GUI for publishing to /steer_bot/ackermann_steering_controller/cmd_vel -->
    <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
        <param name="default_topic" value="ackermann_steering_controller/cmd_vel"/>
    </node> 

     <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model ackermann_bot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'ackermann')" /> 

    
    
    
    
    
    
    
    
    
            
              <!--  *bicycle model*  -->
            
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model servingbot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'serving_bot')" />
    
    
    
    
            
      
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
    </node>


    <!--  ************** Map **************  -->
    <!-- se si vuole usare una mappa custom provare con map.yaml -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find mpc_ros)/map/sq_world.yaml" output="screen">
        <param name="frame_id" value="map"/>
    </node>


    <!--  ************** Localization **************  -->
    
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <rosparam file="$(find mpc_ros)/params/amcl_params.yaml" command="load" />
        <param name="initial_pose_x"            value="$(arg x_pos)"/>
        <param name="initial_pose_y"            value="$(arg y_pos)"/>
        <param name="initial_pose_a"            value="$(arg yaw)"/>
    </node>

    <!--  ************** Navigation ***************  -->   
    
    <!-- Se voglio usare navigation con altri modelli bisogna andare su servingbot/serving_mobile/servingbot_navigation/launch/movebase.launch e cambiare, nella riga 3, argomento della velocitÃ  che accetta da /cmd_vel a ackermann_steering_controller/cmd_vel. esiste un modo per farlo con un if? -->
    
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find mpc_ros)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find mpc_ros)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find mpc_ros)/params/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find mpc_ros)/params/global_costmap_params.yaml" command="load" />    
        
        <!-- Global Planner -->
        <param name="base_global_planner" value="global_planner/GlobalPlanner" />
        <param name="planner_frequency" value="1.0" />
        <param name="planner_frequency" value="0.0" if="$(eval controller == 'pure_pursuit')"/>
        <param name="planner_patience" value="5.0" />
        <rosparam file="$(find mpc_ros)/params/global_planner_params.yaml" command="load" />
        
        <!-- Local Planner -->
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"  if="$(eval controller == 'mpc')"/>
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"  if="$(eval controller == 'dwa')"/>    
        
        <!-- external controller 
        <remap from="/cmd_vel" to="/fake_cmd" unless="$(eval controller == 'dwa')"/>
        -->
        <remap from="/cmd_vel" to="/ackermann_steering_controller/cmd_vel"/>
    </node>
    
    <!--  ************** MPC Node **************  -->
    <node name="nav_mpc" pkg="mpc_ros" type="nav_mpc" output="screen" if="$(eval controller == 'mpc')" >
        <rosparam file="$(find mpc_ros)/params/mpc_last_params.yaml" command="load" />
    </node>

    <!--  ************** Pure Pursuit **************  -->
    <node name="Pure_Pursuit" pkg="mpc_ros" type="Pure_Pursuit" output="screen" if="$(eval controller == 'pure_pursuit')" >
        <rosparam file="$(find mpc_ros)/params/pure_pursuit_params.yaml" command="load" />
        <remap from="/pure_pursuit/odom" to="/odom" />
        <remap from="/pure_pursuit/global_planner" to="/move_base/GlobalPlanner/plan" />
        <remap from="/pure_pursuit/goal" to="/move_base_simple/goal" />
        <remap from="/pure_pursuit/cmd_vel" to="/cmd_vel" />
    </node>

    <!--  ************** Visualization **************  -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mpc_ros)/params/total_rviz_navigation.rviz"/>
</launch>
